#--------------------------------------
# Carl Schmertmann
# 19 Sep 2021
#
# interactive display of 
#     log mortality rates
#     survival probabilities (lx)
#     death fractions (dx)
# for any given set of linear spline coefficients in the
# TOPALS relational mortality model
#
# As in the app for the Brass logit model, 
# the user can select one of three standard
# schedules from the HMD (all for both sexes combined): 
#    Sweden   1880 
#    Portugal 1950 
#    Japan    2000 
#--------------------------------------

library(shiny)
library(tidyverse)
library(splines)

# load and process example data ----
# df = structure(
#        list(age = 0:99, 
#             
#         SWE1880  =  c(-2.0423, -3.22565, -3.64123, -3.92815, -4.15665, -4.4129, -4.61119, 
#                       -4.77596, -4.91578, -5.02372, -5.07039, -5.20483, -5.4538, -5.47744, 
#                       -5.51399, -5.47029, -5.42843, -5.34331, -5.3817, -5.21766, -5.08644, 
#                       -5.16379, -5.11267, -5.07039, -5.01014, -5.09293, -4.96758, -5.01164, 
#                       -4.96614, -5.02676, -4.97914, -4.99821, -4.83082, -4.93646, -4.83333, 
#                       -4.84216, -4.82956, -4.89419, -4.77952, -4.77359, -4.64495, -4.80974, 
#                       -4.65963, -4.68747, -4.66492, -4.54126, -4.52359, -4.57658, -4.51533, 
#                       -4.37963, -4.32754, -4.30433, -4.25804, -4.21991, -4.1799, -4.17469, 
#                       -3.9739, -3.92207, -3.90009, -3.79468, -3.79602, -3.63515, -3.53393, 
#                       -3.46862, -3.4486, -3.34472, -3.24753, -3.15778, -3.05548, -2.92957, 
#                       -2.82633, -2.75719, -2.67162, -2.58058, -2.56304, -2.4124, -2.29204, 
#                       -2.25742, -2.07465, -1.98442, -1.97616, -1.82319, -1.75718, -1.72076, 
#                       -1.60296, -1.47916, -1.4078, -1.28576, -1.32886, -1.20878, -1.13709, 
#                       -1.06764, -1.00052, -0.9358, -0.87357, -0.81385, -0.7567, -0.70219, 
#                       -0.6503, -0.60108),
#         PRT1950 = c(-2.25341, -3.50756, -4.34898, -5.20483, -5.48948, -5.88171, 
#                     -6.16582, -6.29257, -6.41306, -6.49565, -6.63012, -6.65311, -6.69264, 
#                     -6.75934, -6.63012, -6.38896, -6.26065, -6.16107, -5.9332, -5.89615, 
#                     -5.76035, -5.76992, -5.63519, -5.62405, -5.53912, -5.58867, -5.62405, 
#                     -5.58068, -5.57539, -5.5675, -5.52396, -5.57013, -5.65499, -5.51151, 
#                     -5.64929, -5.54935, -5.39703, -5.46084, -5.37953, -5.42162, -5.17433, 
#                     -5.37953, -5.12942, -5.14302, -5.15508, -5.01917, -5.05302, -4.9923, 
#                     -4.90763, -4.87829, -4.7161, -4.79391, -4.69729, -4.58733, -4.54032, 
#                     -4.51077, -4.38845, -4.31325, -4.1858, -4.34435, -3.95754, -4.01295, 
#                     -3.86705, -3.76059, -3.73681, -3.61377, -3.57056, -3.45428, -3.25814, 
#                     -3.47668, -2.93878, -3.06166, -2.81474, -2.71402, -2.78256, -2.53024, 
#                     -2.5373, -2.49751, -2.2285, -2.43921, -2.01156, -2.3086, -1.99077, 
#                     -1.97891, -1.7921, -1.67531, -1.6053, -1.63517, -1.41576, -1.55708, 
#                     -1.19902, -1.38577, -1.32622, -1.26808, -1.2114, -1.15614, -1.10238, 
#                     -1.05011, -0.99937, -0.95016) ,
#         JPN2000 = c(-5.71687, -7.5811, -8.11173, -8.42188, -8.56849, -8.80488, 
#                     -8.87387, -8.94798, -9.21034, -9.21034, -9.3157, -9.21034, -9.21034, 
#                     -8.94798, -8.80488, -8.62255, -8.18072, -8.07894, -7.84936, -7.75173, 
#                     -7.70626, -7.72874, -7.62111, -7.6009, -7.54263, -7.66278, -7.6009, 
#                     -7.64172, -7.5811, -7.52394, -7.45248, -7.36979, -7.32327, -7.32327, 
#                     -7.22247, -7.1309, -7.16912, -6.99114, -6.93821, -6.86853, -6.79443, 
#                     -6.7089, -6.58567, -6.57845, -6.39493, -6.31443, -6.24507, -6.15163, 
#                     -6.04065, -5.94458, -5.81583, -5.73218, -5.63519, -5.54422, -5.50411, 
#                     -5.37304, -5.32466, -5.28244, -5.1761, -5.09783, -5.02982, -4.97479, 
#                     -4.86265, -4.74214, -4.66386, -4.55543, -4.47502, -4.3701, -4.28092, 
#                     -4.19638, -4.09595, -4.01129, -3.9246, -3.82768, -3.72554, -3.6462, 
#                     -3.53051, -3.44264, -3.34133, -3.22088, -3.08434, -2.95767, -2.84284, 
#                     -2.73722, -2.61798, -2.50998, -2.39032, -2.27429, -2.16849, -2.05799, 
#                     -1.95758, -1.83239, -1.73989, -1.63964, -1.54043, -1.44843, -1.3529, 
#                     -1.25994, -1.16983, -1.08276)), 
#        row.names = c(NA, -100L),
#        class = "data.frame")

#............................................................
# new df with 3 (smoothed standards): 
# Norway females 2010-2019, 
# Poland males 1960-1969,
# Taiwan both sexes 1990-1999
#............................................................


df = structure(list(age = 0:99, 
        `NOR Female 2010-2019` = 
                   c(-6.1374, -8.5625, -9.3369, -9.3939, -9.492, 
                    -9.6903, -9.8729, -9.9491, -9.9287, -9.8464, 
                    -9.7329, -9.6024, -9.4646, -9.3245, -9.1667,
                    -8.9705, -8.7304, -8.5002, -8.3485, -8.321, 
                    -8.3704, -8.4266, -8.4358, -8.4100, -8.3774, 
                    -8.3583, -8.3407, -8.3043, -8.2365, -8.1558,
                    -8.0880, -8.0505,  -8.025, -7.9843, -7.9099,
                    -7.8185, -7.7355, -7.6779, -7.6289, -7.5637, 
                    -7.4651, -7.3475, -7.2333, -7.1383, -7.0528, 
                    -6.9607, -6.8504, -6.7296, -6.6105, -6.5021, 
                    -6.3997, -6.2955, -6.1841, -6.0711, -5.9648, 
                    -5.8712, -5.7872, -5.7075, -5.6271, -5.5420, 
                    -5.4486, -5.3453, -5.2379, -5.1345, -5.0406,
                    -4.9516, -4.8605, -4.7622, -4.6595, -4.5570, 
                    -4.4581, -4.3603, -4.2595, -4.1527, -4.0400,
                    -3.9227, -3.8015, -3.6769, -3.5493, -3.4192, 
                    -3.2874, -3.1552, -3.0232, -2.8911, -2.7579, 
                    -2.6229, -2.4849, -2.3427, -2.1965, -2.0508, 
                    -1.9117, -1.7834, -1.6630, -1.5464, -1.4302, 
                    -1.3155, -1.2046, -1.0993, -0.9998, -0.9060), 
        `POL Male 1960-1969` = 
                  c(-2.9870, -5.7235, -6.7299, -6.9225, -7.0550, 
                    -7.2305, -7.3893, -7.4868, -7.5383, -7.5740, 
                    -7.6147, -7.6439, -7.6356, -7.5697, -7.4483, 
                    -7.2797, -7.0759, -6.8648, -6.6784, -6.5411,
                    -6.4467, -6.3814, -6.3332, -6.2981, -6.2741, 
                    -6.2585, -6.2461, -6.2315, -6.2100, -6.1808, 
                    -6.1443, -6.1014, -6.0551, -6.0091, -5.9657, 
                    -5.9217, -5.8727, -5.8156, -5.7532, -5.6897, 
                    -5.6279, -5.5656, -5.4993, -5.4267, -5.3507, 
                    -5.2755, -5.2036, -5.1307, -5.0509, -4.9603, 
                    -4.8631, -4.7655, -4.6720, -4.5802, -4.4860, 
                    -4.3866, -4.2832, -4.1787, -4.0751, -3.9733, 
                    -3.8736, -3.7762, -3.6798, -3.5832, -3.4854, 
                    -3.3877, -3.2922, -3.2001, -3.1112, -3.0246, 
                    -2.9395, -2.8548, -2.7692, -2.6823, -2.5951, 
                    -2.5094, -2.4259, -2.3422, -2.2551, -2.1627, 
                    -2.0684, -1.9766, -1.8909, -1.8097, -1.7302, 
                    -1.6503, -1.5710, -1.4941, -1.4209, -1.3510, 
                    -1.2837, -1.2181, -1.1533, -1.0883, -1.0226, 
                    -0.9586, -0.8991, -0.8459, -0.7969, -0.7488), 
        `Taiwan Both Sexes 1990-1999` = 
                  c(-5.0822, -6.7675, -7.4261, -7.6166, -7.7929, 
                    -7.9897, -8.1373, -8.1876, -8.1803, -8.1768, 
                    -8.2154, -8.2403, -8.1726, -7.9606, -7.6619, 
                    -7.3614, -7.1299, -6.9821, -6.9184, -6.9306, 
                    -6.9748, -6.9981, -6.9633, -6.8955, -6.835, 
                    -6.8112, -6.8075, -6.7961, -6.7567, -6.699, 
                    -6.6401, -6.5925, -6.5502, -6.5023, -6.4411, 
                    -6.3714, -6.3011, -6.2360, -6.1737, -6.1096, 
                    -6.0404, -5.9681, -5.8957, -5.8256, -5.756, 
                    -5.6846, -5.6092, -5.5307, -5.4501, -5.3688, 
                    -5.2878, -5.2079, -5.1297, -5.0522, -4.9738, 
                    -4.8934, -4.8109, -4.7264, -4.6403, -4.5524, 
                    -4.4630, -4.3723, -4.2811, -4.1906, -4.1013, 
                    -4.0124, -3.9222, -3.8299, -3.7357, -3.6405, 
                    -3.5449, -3.4478, -3.3480, -3.2449, -3.1407, 
                    -3.0384, -2.9394, -2.8401, -2.7354, -2.6221, 
                    -2.5058, -2.3937, -2.2915, -2.1969, -2.1059, 
                    -2.0152, -1.9247, -1.8351, -1.7472, -1.6629, 
                    -1.5843, -1.5122, -1.4422, -1.3685, -1.2873, 
                    -1.203,  -1.1222, -1.0496, -0.9834, -0.9203)), 
   class = c("tbl_df", "tbl", "data.frame"), row.names = c(NA, -100L))

#............................................................

knot_positions = c(0,1,10,20,40,70)
B              = splines::bs( 0:99, knots=knot_positions, degree=1 )
K              = ncol(B) 

TOPALS = function(std, alpha) {
  
    logmx = df[[ std ]] + B %*% alpha
    
    # fix this on second pass...quick and dirty way
    # to reuse old Brass code is to have this function
    # output *lx* column
    
    mx = exp(logmx)
    Hx = head( cumsum( c(0,mx)), -1)
    lx = exp(-Hx) 
    dx = c( -diff(lx), tail(lx,1))
    return( tibble( age=0:99,mx, logmx, Hx, dx, lx) )
}

# UI layout ----
# Define UI for application that draws a histogram
ui <- fluidPage(
   
   # Application title
   titlePanel("TOPALS Relational Model"),
   
   
  
   sidebarLayout(
      sidebarPanel(
        
    
        selectInput(inputId="std_select", 
                    label="Standard Schedule",
                    choices = tail( names(df), -1),
                    selected='Norway Female 2010-2019'),
        
        selectInput(inputId="plot_select", 
                    label="Select data to plot",
                    choices = c('logmu','lx','dx'),
                    selected='logmu'),
        
        
         sliderInput(inputId='a1',
                     label = "a1",
                     min = -1.0,
                     max = +1.0,
                     step = 0.10,
                     value=0,width='25%'),
         sliderInput(inputId='a2',
                     label = "a2",
                     min = -1.0,
                     max = +1.0,
                     step = 0.10,
                     value=0,width='25%'),
         sliderInput(inputId='a3',
                     label = "a3",
                     min = -1.0,
                     max = +1.0,
                     step = 0.10,
                     value=0,width='25%'),
         sliderInput(inputId='a4',
                     label = "a4",
                     min = -1.0,
                     max = +1.0,
                     step = 0.10,
                     value=0,width='25%'),
         sliderInput(inputId='a5',
                     label = "a5",
                     min = -1.0,
                     max = +1.0,
                     step = 0.10,
                     value=0,width='25%'),
         sliderInput(inputId='a6',
                     label = "a6",
                     min = -1.0,
                     max = +1.0,
                     step = 0.10,
                     value=0,width='25%'),
         sliderInput(inputId='a7',
                     label = "a7",
                     min = -1.0,
                     max = +1.0,
                     step = 0.10,
                     value=0,width='25%')
         

      
      ),  #sidebarPanel

      # Show a plot of log mortality
      mainPanel(
         plotOutput(outputId="main_plot")
      )
 
   ) # sidebarLayout
) # fluid

# Server actions ----
# Define server logic required to draw a histogram
server <- function(input, output) {
   
  
  output$main_plot <- renderPlot({

    alpha = c(input$a1,input$a2,input$a3,input$a4,
              input$a5,input$a6,input$a7)
    
    std   = input$std_select
    
    plot =  input$plot_select
    
    # legend_text = c( 
    #                paste0('baseline\n(a=',
    #                        sprintf("%+2.1f", 0),
    #                       ', b=',
    #                       sprintf("% 2.1f", 1),')'),
    #                paste0('selected\n(a=',
    #                       sprintf("%+2.1f", alpha),
    #                       ', b=',
    #                       sprintf("% 2.1f", beta),')')
    #                 ) 
                   
    legend_text = paste('Model', 1:2)
    
    # calculate log mortality and baseline
    transformed   = TOPALS(std,alpha)
    baseline      = TOPALS(std,rep(0,7))
    
    n              = rep(1,100)
    age_dx         = baseline$age + n/2
    

    if (plot == 'logmu') {
      
      alpha_info  = tibble(age = c(knot_positions,100), alpha=alpha)
      offset_info = tibble(age=0:100, y=c(as.numeric(B %*% alpha),NA))
    
      df = data.frame( age= rep(baseline$age,2),
                         sched = rep(legend_text,c(100,100)),
                         logm = c(baseline$logmx,transformed$logmx))
        
       G =  ggplot(data=df, aes(x=age, y=logm, 
                            color = sched, 
                            alpha = sched)) +
          geom_point(size=4) +
          geom_line(lwd=2) +
          scale_alpha_manual(guide=FALSE,
                             values=c(1.0,0.5)) +
          scale_color_manual(values=c('grey','red')) +
          scale_x_continuous(limits=c(0,100),
                             breaks=seq(0,100,10)) +
          scale_y_continuous(limits=c(-12,1)) +
          labs(title='Log Mortality Rates by Age',
               subtitle=paste('Standard Schedule =',std)) +
          theme_bw() +
          theme(legend.text = element_text(family='mono')) +
          theme(panel.grid.major = element_line(colour = "darkgrey"))
       
       # add knot positions
         
       G = G + 
            geom_point(data=alpha_info,aes(x=age,y=alpha), color='red', inherit.aes = FALSE) +
            geom_line(data=offset_info,aes(x=age,y=y), color='red', lwd=0.5, inherit.aes = FALSE) +
            geom_text(aes(x=50,y=0.8), label='Linear Spline Offsets', size=5, color='red')
        
    } else if (plot == 'lx') {
      
      df = data.frame( age= rep(baseline$age,2),
                       sched = rep(legend_text,c(100,100)),
                       lx = c(baseline$lx, transformed$lx))
      
      G =  ggplot(data=df, aes(x=age, y=lx, 
                          color = sched, 
                          alpha = sched)) +
        geom_point(size=4) +
        geom_line(lwd=2) +
        scale_alpha_manual(guide=FALSE,
                           values=c(1.0,0.5)) +
        scale_color_manual(values=c('grey','limegreen')) +
        scale_x_continuous(limits=c(0,99),
                           breaks=seq(0,99,10)) +
        scale_y_continuous(limits=c(0,1)) +
        labs(title='Survival Prob by Age',
             subtitle=paste('Standard Schedule =',std)) +
        theme_bw() +
        theme(legend.text = element_text(family='mono')) +
        theme(panel.grid.major = element_line(colour = "darkgrey"))
      
            
    } else if (plot == 'dx') {  
      
      df = data.frame( age= age_dx,
                       sched = rep(legend_text,c(100,100)),
                       dx = c(baseline$dx, transformed$dx))
      
      G=  ggplot(data=df, aes(x=age, y=dx, 
                          color = sched, 
                          alpha = sched)) +
        geom_point(size=4) +
        geom_line(lwd=2) +
        scale_alpha_manual(guide=FALSE,
                           values=c(1.0,0.5)) +
        scale_color_manual(values=c('grey','purple')) +
        scale_x_continuous(limits=c(0,99),
                           breaks=seq(0,99,10)) +
        scale_y_continuous(limits=c(0,.15)) +
        labs(title=paste('Deaths by Age'),
             subtitle=paste('Standard Schedule =',std)) +
        theme_bw() +
        theme(legend.text = element_text(family='mono')) +
        theme(panel.grid.major = element_line(colour = "darkgrey"))
      
      
      }  # dx 
    
    print(G)
    
   }) # renderPlot
   
} # server

# Run the application 
shinyApp(ui = ui, server = server)

