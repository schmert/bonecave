#--------------------------------------
# Carl Schmertmann
# 19 Sep 2021
#
# interactive display of 
#     log mortality rates
#     survival probabilities (lx)
#     death fractions (dx)
# for any given set of linear spline coefficients in the
# TOPALS relational mortality model
#
# As in the app for the Brass logit model, 
# the user can select one of three standard
# schedules from the HMD (all for both sexes combined): 
#    Sweden   1880 
#    Portugal 1950 
#    Japan    2000 
#--------------------------------------

library(shiny)
library(tidyverse)
library(splines)

df = structure(
       list(age = 0:99, 
            
        SWE1880  =  c(-2.0423, -3.22565, -3.64123, -3.92815, -4.15665, -4.4129, -4.61119, 
                      -4.77596, -4.91578, -5.02372, -5.07039, -5.20483, -5.4538, -5.47744, 
                      -5.51399, -5.47029, -5.42843, -5.34331, -5.3817, -5.21766, -5.08644, 
                      -5.16379, -5.11267, -5.07039, -5.01014, -5.09293, -4.96758, -5.01164, 
                      -4.96614, -5.02676, -4.97914, -4.99821, -4.83082, -4.93646, -4.83333, 
                      -4.84216, -4.82956, -4.89419, -4.77952, -4.77359, -4.64495, -4.80974, 
                      -4.65963, -4.68747, -4.66492, -4.54126, -4.52359, -4.57658, -4.51533, 
                      -4.37963, -4.32754, -4.30433, -4.25804, -4.21991, -4.1799, -4.17469, 
                      -3.9739, -3.92207, -3.90009, -3.79468, -3.79602, -3.63515, -3.53393, 
                      -3.46862, -3.4486, -3.34472, -3.24753, -3.15778, -3.05548, -2.92957, 
                      -2.82633, -2.75719, -2.67162, -2.58058, -2.56304, -2.4124, -2.29204, 
                      -2.25742, -2.07465, -1.98442, -1.97616, -1.82319, -1.75718, -1.72076, 
                      -1.60296, -1.47916, -1.4078, -1.28576, -1.32886, -1.20878, -1.13709, 
                      -1.06764, -1.00052, -0.9358, -0.87357, -0.81385, -0.7567, -0.70219, 
                      -0.6503, -0.60108),
        PRT1950 = c(-2.25341, -3.50756, -4.34898, -5.20483, -5.48948, -5.88171, 
                    -6.16582, -6.29257, -6.41306, -6.49565, -6.63012, -6.65311, -6.69264, 
                    -6.75934, -6.63012, -6.38896, -6.26065, -6.16107, -5.9332, -5.89615, 
                    -5.76035, -5.76992, -5.63519, -5.62405, -5.53912, -5.58867, -5.62405, 
                    -5.58068, -5.57539, -5.5675, -5.52396, -5.57013, -5.65499, -5.51151, 
                    -5.64929, -5.54935, -5.39703, -5.46084, -5.37953, -5.42162, -5.17433, 
                    -5.37953, -5.12942, -5.14302, -5.15508, -5.01917, -5.05302, -4.9923, 
                    -4.90763, -4.87829, -4.7161, -4.79391, -4.69729, -4.58733, -4.54032, 
                    -4.51077, -4.38845, -4.31325, -4.1858, -4.34435, -3.95754, -4.01295, 
                    -3.86705, -3.76059, -3.73681, -3.61377, -3.57056, -3.45428, -3.25814, 
                    -3.47668, -2.93878, -3.06166, -2.81474, -2.71402, -2.78256, -2.53024, 
                    -2.5373, -2.49751, -2.2285, -2.43921, -2.01156, -2.3086, -1.99077, 
                    -1.97891, -1.7921, -1.67531, -1.6053, -1.63517, -1.41576, -1.55708, 
                    -1.19902, -1.38577, -1.32622, -1.26808, -1.2114, -1.15614, -1.10238, 
                    -1.05011, -0.99937, -0.95016) ,
        JPN2000 = c(-5.71687, -7.5811, -8.11173, -8.42188, -8.56849, -8.80488, 
                    -8.87387, -8.94798, -9.21034, -9.21034, -9.3157, -9.21034, -9.21034, 
                    -8.94798, -8.80488, -8.62255, -8.18072, -8.07894, -7.84936, -7.75173, 
                    -7.70626, -7.72874, -7.62111, -7.6009, -7.54263, -7.66278, -7.6009, 
                    -7.64172, -7.5811, -7.52394, -7.45248, -7.36979, -7.32327, -7.32327, 
                    -7.22247, -7.1309, -7.16912, -6.99114, -6.93821, -6.86853, -6.79443, 
                    -6.7089, -6.58567, -6.57845, -6.39493, -6.31443, -6.24507, -6.15163, 
                    -6.04065, -5.94458, -5.81583, -5.73218, -5.63519, -5.54422, -5.50411, 
                    -5.37304, -5.32466, -5.28244, -5.1761, -5.09783, -5.02982, -4.97479, 
                    -4.86265, -4.74214, -4.66386, -4.55543, -4.47502, -4.3701, -4.28092, 
                    -4.19638, -4.09595, -4.01129, -3.9246, -3.82768, -3.72554, -3.6462, 
                    -3.53051, -3.44264, -3.34133, -3.22088, -3.08434, -2.95767, -2.84284, 
                    -2.73722, -2.61798, -2.50998, -2.39032, -2.27429, -2.16849, -2.05799, 
                    -1.95758, -1.83239, -1.73989, -1.63964, -1.54043, -1.44843, -1.3529, 
                    -1.25994, -1.16983, -1.08276)), 
       row.names = c(NA, -100L),
       class = "data.frame")

knot_positions = c(0,1,10,20,40,70)
B              = splines::bs( 0:99, knots=knot_positions, degree=1 )
K              = ncol(B) 

TOPALS = function(std, alpha) {
  
    new_log_schedule = df[[ std ]] + B %*% alpha
    
    print(new_log_schedule)
    
    # fix this on second pass...quick and dirty way
    # to reuse old Brass code is to have this function
    # output *lx* column
    
    mx = exp(new_log_schedule)
    Hx = head( cumsum( c(0,mx)), -1)
    lx = exp(-Hx) 
    return(list( age=0:99, lx = lx) )
}

# Define UI for application that draws a histogram
ui <- fluidPage(
   
   # Application title
   titlePanel("TOPALS Relational Model"),
   
   
  
   sidebarLayout(
      sidebarPanel(
         sliderInput(inputId='a1',
                     label = "a1",
                     min = -0.5,
                     max =  0.5,
                     step = 0.05,
                     value = 0),
         sliderInput(inputId='a2',
                     label = "a2",
                     min = -0.5,
                     max =  0.5,
                     step = 0.05,
                     value = 0),
         sliderInput(inputId='a3',
                     label = "a3",
                     min = -0.5,
                     max =  0.5,
                     step = 0.05,
                     value = 0),
         sliderInput(inputId='a4',
                     label = "a4",
                     min = -0.5,
                     max =  0.5,
                     step = 0.05,
                     value = 0),
         sliderInput(inputId='a5',
                     label = "a5",
                     min = -0.5,
                     max =  0.5,
                     step = 0.05,
                     value = 0),
         sliderInput(inputId='a6',
                     label = "a6",
                     min = -0.5,
                     max =  0.5,
                     step = 0.05,
                     value = 0),
         sliderInput(inputId='a7',
                     label = "a7",
                     min = -0.5,
                     max =  0.5,
                     step = 0.05,
                     value = 0),
         

      
      selectInput(inputId="plot_select", 
                  label="Select data to plot",
                  choices = c('logmu','lx','dx'),
                  selected='lx'),
      
      selectInput(inputId="std_select", 
                  label="Standard Schedule",
                  choices = c('SWE1880', 'PRT1950', 'JPN2000'),
                  selected='SWE1880')
      
      ),  #sidebarPanel

      # Show a plot of log mortality
      mainPanel(
         plotOutput(outputId="main_plot")
      )
 
   ) # sidebarLayout
) # fluid

# Define server logic required to draw a histogram
server <- function(input, output) {
   
  
  output$main_plot <- renderPlot({

    alpha = c(input$a1,input$a2,input$a3,input$a4,
              input$a5,input$a6,input$a7)
    
    std   = input$std_select
    
    plot =  input$plot_select
    
    # legend_text = c( 
    #                paste0('baseline\n(a=',
    #                        sprintf("%+2.1f", 0),
    #                       ', b=',
    #                       sprintf("% 2.1f", 1),')'),
    #                paste0('selected\n(a=',
    #                       sprintf("%+2.1f", alpha),
    #                       ', b=',
    #                       sprintf("% 2.1f", beta),')')
    #                 ) 
                   
    legend_text = paste('Model', 1:2)
    
    # calculate log mortality and baseline
    transformed   = TOPALS(std,alpha)
    baseline      = TOPALS(std,rep(0,7))
    
    n              = rep(1,100)
    age_dx         = baseline$age + n/2
    
    baseline_dx    = c( -diff(baseline$lx   ), tail(baseline$lx,   1))
    transformed_dx = c( -diff(transformed$lx), tail(transformed$lx,1))
    
    baseline_logm    = log( -1/n * c( log( tail(baseline$lx,-1)    / head(baseline$lx,-1)), NaN) ) 
    transformed_logm = log( -1/n * c( log( tail(transformed$lx,-1) / head(transformed$lx,-1)), NaN) ) 
    
    if (plot == 'logmu') {
    
      df = data.frame( age= rep(baseline$age,2),
                         sched = rep(legend_text,c(100,100)),
                         logm = c(baseline_logm,transformed_logm))
        
       G =  ggplot(data=df, aes(x=age, y=logm, 
                            color = sched, 
                            alpha = sched)) +
          geom_point(size=4) +
          geom_line(lwd=2) +
          scale_alpha_manual(guide=FALSE,
                             values=c(1.0,0.7)) +
          scale_color_manual(values=c('grey','red')) +
          scale_x_continuous(limits=c(0,99),
                             breaks=seq(0,99,10)) +
          scale_y_continuous(limits=c(-15,0)) +
          labs(title='Log Mortality Rates by Age',
               subtitle=paste('Standard Schedule =',std)) +
          theme_bw() +
          theme(legend.text = element_text(family='mono')) +
          theme(panel.grid.major = element_line(colour = "darkgrey"))
        
    } else if (plot == 'lx') {
      
      print(list(legend_text=legend_text, baseline=baseline))
      
      df = data.frame( age= rep(baseline$age,2),
                       sched = rep(legend_text,c(100,100)),
                       lx = c(baseline$lx, transformed$lx))
      
      G =  ggplot(data=df, aes(x=age, y=lx, 
                          color = sched, 
                          alpha = sched)) +
        geom_point(size=4) +
        geom_line(lwd=2) +
        scale_alpha_manual(guide=FALSE,
                           values=c(1.0,0.7)) +
        scale_color_manual(values=c('grey','limegreen')) +
        scale_x_continuous(limits=c(0,99),
                           breaks=seq(0,99,10)) +
        scale_y_continuous(limits=c(0,1)) +
        labs(title='Survival Prob by Age',
             subtitle=paste('Standard Schedule =',std)) +
        theme_bw() +
        theme(legend.text = element_text(family='mono')) +
        theme(panel.grid.major = element_line(colour = "darkgrey"))
      
            
    } else if (plot == 'dx') {  
      
      df = data.frame( age= age_dx,
                       sched = rep(legend_text,c(100,100)),
                       dx = c(baseline_dx, transformed_dx))
      
      G=  ggplot(data=df, aes(x=age, y=dx, 
                          color = sched, 
                          alpha = sched)) +
        geom_point(size=4) +
        geom_line(lwd=2) +
        scale_alpha_manual(guide=FALSE,
                           values=c(1.0,0.7)) +
        scale_color_manual(values=c('grey','purple')) +
        scale_x_continuous(limits=c(0,99),
                           breaks=seq(0,99,10)) +
        scale_y_continuous(limits=c(0,.15)) +
        labs(title=paste('Deaths by Age'),
             subtitle=paste('Standard Schedule =',std)) +
        theme_bw() +
        theme(legend.text = element_text(family='mono')) +
        theme(panel.grid.major = element_line(colour = "darkgrey"))
      
      
      }  # dx 
    
    print(G)
    
   }) # renderPlot
   
} # server

# Run the application 
shinyApp(ui = ui, server = server)

